# use terminal command :
# docker-compose -f 'docker-compose-prod.yml' up --build
# docker-compose -f 'docker-compose-prod.yml' down
# This is my final product to sent to the cloud
version: '3.1'

services:
  db:
    image: postgres
    # restart: always
    container_name: 'pgsql'
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: pgadmin
      POSTGRES_PASSWORD: pgpalavra
      POSTGRES_DB: mydatabase
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    # networks:
    #   mynetwork:
    #     ipv4_address: 172.20.20.1
    networks: 
      - production-network
  adminer:
    image: adminer
    # restart: always
    ports:
      - "8080:8080"
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    # networks:
    #   mynetwork:
    #     ipv4_address: 172.20.70.1
    networks: 
      - production-network
  node-ytalo-backend:
    image: ytalojacs/nestjsbasic_1-0
    ports:
      - "3000:3000"
    command: >
      sh -c "npm run build \
              npm run start:prod"
    environment:
          POSTGRES_USER: pgadmin
          POSTGRES_PASSWORD: pgpalavra
          POSTGRES_DB: mydatabase
          POSTGRES_HOST: db
    extra_hosts:
      - "host.docker.internal:host-gateway"
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    # networks:
    #   mynetwork:
    #     ipv4_address: 172.20.50.1
    networks: 
      - production-network
  prophet:
    image: ytalojacs/prophetforecast-1_0
    ports:
      - "3001:3001"
    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    # networks:
    #   mynetwork:
    #     ipv4_address: 172.20.100.1
    networks: 
      - production-network
  #the front end I'll use vercel so this part for now ignore...
  # but the idea is to use reverse proxy to use the same cluster at AWS. 
  # front-end:
  #   depends_on:
  #     - node-ytalo-backend
  #   image: ytalojacs/frontendjsprophet
  #   environment:
  #     PORT: 3010
  #   command: >
  #     sh -c "npm run build \
  #             npm run start"
  #   ports:
  #     - "3010:3010"
  #   networks: 
  #     - production-network
  # reverse-proxy-nginx:
  #   image: ytalojacs/nginx-reverse-proxy-prophet-backend
  #   ports:
  #     - "8080:8080"
  #     - "8090:8090"
  #   depends_on:
  #     - node-ytalo-backend
  #     - front-end
  #     - prophet
  #   networks: 
  #     - production-network
networks:
  production-network:
    name: production-network
    # external: true

    # driver: bridge














    # extra_hosts:
    #   - "host.docker.internal:host-gateway"
    # links: 
    #   - "node-ytalo-backend:myback.org"
    # networks:
    #   mynetwork:
    #     ipv4_address: 172.20.128.1
# networks:
#   mynetwork:
#     ipam:
#       config:
#         - subnet: 172.20.0.0/16
#  docker prune the network... in case u are using some. even if the container is down
# docker network prune

#command to show network
#docker network ls


# docker network inspect networkname
# basicbackenddockernext_default
# "172.19.0.0/16",
# "Gateway": "172.19.0.1"

# frontendnestjs_default
#  "Subnet": "172.20.0.0/16",
# "Gateway": "172.20.0.1"

# forecastprophetdocker_default 
#  "Subnet": "172.18.0.0/16",
#  "Gateway": "172.18.0.1"


